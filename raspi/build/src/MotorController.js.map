{"version":3,"sources":["MotorController.js"],"names":[],"mappings":";;;;;;;;IAAO,OAAO,2BAAM,+BAA+B;;;;;AAGnD,IAAI,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;;;IAQvB,eAAe;;;;;;;AAQN,WART,eAAe,CAQL,OAAO;0BARjB,eAAe;;AASb,QAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;GACtB;;uBAXC,eAAe;AAoBjB,cAAU;;;;;;;;;aAAA,oBAAC,MAAM,EAAE,EAElB;;;;AASD,QAAI;;;;;;;;;aAAA,cAAC,MAAM,EAAE;AACT,YAAI,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;OACnD;;;;;;SAjCC,eAAe;;;iBAoCN,eAAe","file":"MotorController.js","sourcesContent":["import packets from './communication/packets/index'\n\n\nlet i2c = require('i2c-bus');\n\n\n/**\n * @brief Motor controller interface\n * @details Control two motors by I2C\n */\n\nclass MotorController {\n\n    /**\n     * @brief Constructor\n     * \n     * @param  address I2C address\n     */\n    \n    constructor(address) {\n        this.address = address;\n        this.parser = null;\n    } \n\n\n    /**\n     * @brief Send a packet to the module\n     * \n     * @param  packet Packet object\n     */\n    \n    sendPacket(packet) {\n\n    }\n\n\n    /**\n     * @brief Ping the module to test communication\n     * @details Use a TestPacket. If the module responds correctly,\n     * the response TestPacket will have a (number+1) number.\n     */\n    \n    ping(number) {\n        this.sendPacket(new packets.TestPacket(number));\n    }\n}\n\nexport default MotorController;"],"sourceRoot":"/source/"}